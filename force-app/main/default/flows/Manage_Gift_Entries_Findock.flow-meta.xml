<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <actionCalls>
        <description>Calls an action to process the gift entry record.</description>
        <name>ProcessGiftEntry</name>
        <label>Process Gift Entry</label>
        <locationX>957</locationX>
        <locationY>1946</locationY>
        <actionName>processGiftEntries</actionName>
        <actionType>processGiftEntries</actionType>
        <connector>
            <targetReference>SetGiftEntryValPostProcessing</targetReference>
        </connector>
        <faultConnector>
            <targetReference>RollBackGiftEntryTrxnUpdates</targetReference>
        </faultConnector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>giftEntryId</name>
            <value>
                <elementReference>GiftEntry.Id</elementReference>
            </value>
        </inputParameters>
        <nameSegment>processGiftEntries</nameSegment>
        <storeOutputAutomatically>true</storeOutputAutomatically>
        <versionSegment>1</versionSegment>
    </actionCalls>
    <apiVersion>59.0</apiVersion>
    <assignments>
        <description>Set the GiftBatchId variable to recordId.</description>
        <name>SetGiftBatchId</name>
        <label>Set GiftBatchID</label>
        <locationX>50</locationX>
        <locationY>242</locationY>
        <assignmentItems>
            <assignToReference>GiftBatchId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>HaveGiftEntryId</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetGiftEntryId</name>
        <label>Get GiftEntryId</label>
        <locationX>314</locationX>
        <locationY>242</locationY>
        <assignmentItems>
            <assignToReference>GiftEntryId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>HaveGiftEntryId</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets values for the gift entry record to the values output by ProcessGiftEntry.</description>
        <name>SetGiftEntryValPostProcessing</name>
        <label>Set Gift Entry Values Post Processing</label>
        <locationX>957</locationX>
        <locationY>2054</locationY>
        <assignmentItems>
            <assignToReference>GiftEntry.LastProcessedDateTime</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Flow.CurrentDateTime</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftProcessingStatus</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>ProcessGiftEntry.giftProcessingStatus</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftProcessingResult</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>ProcessGiftEntry.giftProcessingErrorDetails</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.DonorId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>ProcessGiftEntry.donorId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftTransactionId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>ProcessGiftEntry.giftTransactionId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>UpdateGiftEntryValPostProcessing</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets the default field values of InitialGiftEntry to the field values for Gift Entry from GetGiftEntryFromGiftBatchId.</description>
        <name>SetInitialGiftEntryForGiftBatchId</name>
        <label>Set InitialGiftEntry Values</label>
        <locationX>578</locationX>
        <locationY>650</locationY>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftType</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftType</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.DonorId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.DonorId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftReceivedDate</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftReceivedDate</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.PaymentMethod</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.PaymentMethod</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftAmount</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftAmount</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.CampaignId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.CampaignId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftDesignation1Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftDesignation1Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftDesignation1Percent</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftDesignation1Percent</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftDesignation1Amount</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftDesignation1Amount</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftDesignation2Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftDesignation2Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftDesignation2Percent</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftDesignation2Percent</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftDesignation2Amount</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftDesignation2Amount</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftDesignation3Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftDesignation3Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftDesignation3Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftDesignation3Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftDesignation3Percent</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftDesignation3Percent</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.GiftDesignation3Amount</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.GiftDesignation3Amount</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>InitialGiftEntry.OutreachSourceCodeId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.OutreachSourceCodeId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>GetGiftBatch</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetInitialGiftEntryForGiftEntryId</name>
        <label>Set InitialGiftEntry Values</label>
        <locationX>50</locationX>
        <locationY>650</locationY>
        <assignmentItems>
            <assignToReference>InitialGiftEntry</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftEntryId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftBatchId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftEntryId.GiftBatchId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>GetGiftBatch</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetInitialGiftEntryValuesForGiftEntry</name>
        <label>Set Default Template Gift Entry Record Fields</label>
        <locationX>858</locationX>
        <locationY>1166</locationY>
        <assignmentItems>
            <assignToReference>GiftEntry.DonorId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>DonorRecordDetailLookup.record.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftType</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GiftTypePicklist</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.OrganizationName</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>OrganizationNameText</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.MobilePhone</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>MobilePhoneComponent.value</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.HomePhone</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>HomePhoneComponent.value</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.Email</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>EmailAddressEmailComponent.value</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.Salutation</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>SalutationPicklist</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.FirstName</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>FirstNameText</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.LastName</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>LastNameText</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.PaymentMethod</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>PaymentMethodPicklist</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftReceivedDate</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GiftReceivedDate</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GiftEntryId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftAmount</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GiftAmountNumber</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.City</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>CityText</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.State</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>StateOrProvinceText</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.PostalCode</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>PostalCodeText</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.Street</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>StreetText</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.Country</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>CountryText</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.PaymentIdentifier</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>PaymentIdentifierText</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.SoftCreditInformation</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>SoftCreditComponent.softCredits</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftBatchId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GiftBatchId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.IsSetAsDefault</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>SetGiftEntryAsDefaultCheckbox</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GiftEntryId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.CheckDate</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>CheckDate</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.CampaignId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>CampaignLookup.recordId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftTransactionId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Selected_GiftTransactionId_Default_Template</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftCommitmentId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Selected_GiftCommitmentId_Default_Template</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.OutreachSourceCodeId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>OutreachSourceCodeRecordDetailLookup.record.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftDesignation1Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetDesignationsDesignationInformationComponent.giftDesignationId1</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftDesignation1Percent</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetDesignationsDesignationInformationComponent.giftDesignationPercent1</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftDesignation1Amount</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetDesignationsDesignationInformationComponent.giftDesignationAmount1</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftDesignation2Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetDesignationsDesignationInformationComponent.giftDesignationId2</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftDesignation2Percent</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetDesignationsDesignationInformationComponent.giftDesignationPercent2</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftDesignation2Amount</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetDesignationsDesignationInformationComponent.giftDesignationAmount2</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftDesignation3Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetDesignationsDesignationInformationComponent.giftDesignationId3</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftDesignation3Percent</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetDesignationsDesignationInformationComponent.giftDesignationPercent3</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GiftEntry.GiftDesignation3Amount</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetDesignationsDesignationInformationComponent.giftDesignationAmount3</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>DoesDefaultGiftEntryExist</targetReference>
        </connector>
    </assignments>
    <constants>
        <name>GiftBatchKeyPrefix</name>
        <dataType>String</dataType>
        <value>
            <stringValue>6gb</stringValue>
        </value>
    </constants>
    <constants>
        <name>GiftEntryKeyPrefix</name>
        <dataType>String</dataType>
        <value>
            <stringValue>6ge</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the gift type of individual used in formulas to determine default values for screen components in CollectGiftEntryDetailsScreen.</description>
        <name>GiftTypeIndividual</name>
        <dataType>String</dataType>
        <value>
            <stringValue>Individual</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the Boolean value to determine whether to show components on the CollectGiftEntryDetailsScreen that are used to only store values. Default value is False. Don&apos;t reset this variable.</description>
        <name>IsHide</name>
        <dataType>Boolean</dataType>
        <value>
            <booleanValue>false</booleanValue>
        </value>
    </constants>
    <decisions>
        <description>Determines whether the gift entry ID of Gift Entry from GetGiftEntryFromGiftBatchId exists and GiftEntry is set as default.</description>
        <name>DoesDefaultGiftEntryExist</name>
        <label>Does Default Gift Entry Exist?</label>
        <locationX>858</locationX>
        <locationY>1274</locationY>
        <defaultConnector>
            <targetReference>HaveGiftEntryIdAgain</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasInitialGiftEntry</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetGiftEntryFromGiftBatchId.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GiftEntry.IsSetAsDefault</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ResetFormerDefaultGiftEntry</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether a gift batch ID exists and the gift entry is part of a gift batch.</description>
        <name>HaveGiftBatchId</name>
        <label>Have Gift Batch ID?</label>
        <locationX>1419</locationX>
        <locationY>1838</locationY>
        <defaultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>HaveGiftEntryId</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Yes (Default)</defaultConnectorLabel>
        <rules>
            <name>IsNoGiftBatchId</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GiftBatchId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ProcessGiftEntry</targetReference>
            </connector>
            <label>No</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether GiftEntryId contains a value, indicating the flow edits a gift entry.</description>
        <name>HaveGiftEntryId</name>
        <label>Have Gift Entry ID?</label>
        <locationX>314</locationX>
        <locationY>434</locationY>
        <defaultConnector>
            <targetReference>GetGiftEntryFromGiftBatchId</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasGiftEntryId</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GiftEntryId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetGiftEntryFromGiftEntryId</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <name>HaveGiftEntryIdAgain</name>
        <label>Have Gift Entry ID?</label>
        <locationX>858</locationX>
        <locationY>1622</locationY>
        <defaultConnector>
            <targetReference>CreateGiftEntry</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasGiftEntryIdAgain</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GiftEntryId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>UpdateGiftEntry</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <name>Is_Creditcard</name>
        <label>Is Creditcard</label>
        <locationX>957</locationX>
        <locationY>2270</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>IsCreditcard</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>PaymentMethodPicklist</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Credit Card</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Take_Payment</targetReference>
            </connector>
            <label>Is Creditcard?</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines which template to use to collect gift entry information. To use a third-party template with this flow, change DAF in the Third-Party Template outcome to the name of the third-party template. To use another template with this flow, change Other in the Other Template outcome to the name of the other template. Then add the Screen element and Assignment element to the related outcome path. Finally, link the path to DoesInitialGiftEntryExist.</description>
        <name>UseWhichTemplate</name>
        <label>Use Which Template?</label>
        <locationX>314</locationX>
        <locationY>950</locationY>
        <defaultConnector>
            <targetReference>CollectGiftEntryDetailsScreen</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Template (Default)</defaultConnectorLabel>
        <rules>
            <name>IsThirdPartyTemplate</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>GetGiftBatch.ScreenTemplateName</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>DAF</stringValue>
                </rightValue>
            </conditions>
            <label>Third-Party Template</label>
        </rules>
        <rules>
            <name>IsOtherTemplate</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetGiftBatch.ScreenTemplateName</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Other Template</stringValue>
                </rightValue>
            </conditions>
            <label>Other Template</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether a gift batch ID, a gift entry ID, or a different type of ID was passed into the flow.</description>
        <name>WhatTypeOfId</name>
        <label>What type of ID?</label>
        <locationX>314</locationX>
        <locationY>134</locationY>
        <defaultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>CollectGiftEntryDetailsScreen</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Other (Default)</defaultConnectorLabel>
        <rules>
            <name>IsGiftBatchId</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>recordId</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <elementReference>GiftBatchKeyPrefix</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetGiftBatchId</targetReference>
            </connector>
            <label>Gift Batch ID</label>
        </rules>
        <rules>
            <name>IsGiftEntryId</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>recordId</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <elementReference>GiftEntryKeyPrefix</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetGiftEntryId</targetReference>
            </connector>
            <label>Gift Entry ID</label>
        </rules>
    </decisions>
    <dynamicChoiceSets>
        <description>Stores all the gift types for a gift entry object for use as options for GiftTypePicklist on CollectGiftEntryDetailsScreen.</description>
        <name>GiftTypePicklistChoiceSet</name>
        <dataType>Picklist</dataType>
        <displayField xsi:nil="true"/>
        <object xsi:nil="true"/>
        <picklistField>GiftType</picklistField>
        <picklistObject>GiftEntry</picklistObject>
    </dynamicChoiceSets>
    <dynamicChoiceSets>
        <description>Stores all the payment methods for a gift entry object to use as options for PaymentMethodPicklist on CollectGiftEntryDetailsScreen.</description>
        <name>PaymentMethodPicklistChoiceSet</name>
        <dataType>Picklist</dataType>
        <displayField xsi:nil="true"/>
        <object xsi:nil="true"/>
        <picklistField>PaymentMethod</picklistField>
        <picklistObject>GiftEntry</picklistObject>
    </dynamicChoiceSets>
    <dynamicChoiceSets>
        <description>Stores all the Salutation field values for the Gift Entry object for use as options for SalutationPicklist on CollectGiftEntryDetailsScreen.</description>
        <name>SalutationPicklistChoiceSet</name>
        <dataType>Picklist</dataType>
        <displayField xsi:nil="true"/>
        <object xsi:nil="true"/>
        <picklistField>Salutation</picklistField>
        <picklistObject>GiftEntry</picklistObject>
    </dynamicChoiceSets>
    <environments>Default</environments>
    <formulas>
        <name>CampaignFormula</name>
        <dataType>String</dataType>
        <expression>IF(ISBLANK({!InitialGiftEntry.CampaignId}), 
IF(ISBLANK({!OutreachSourceCodeRecordDetailLookup.record.CampaignId}), {!MatchingGiftCommitmentDataTable.firstSelectedRow.CampaignId}, {!OutreachSourceCodeRecordDetailLookup.record.CampaignId}), 
{!InitialGiftEntry.CampaignId})</expression>
    </formulas>
    <formulas>
        <name>CityDefaultFormula</name>
        <dataType>String</dataType>
        <expression>IF(!ISBLANK({!DonorRecordDetailLookup.record.Id}), IF({!GiftTypePicklist} == {!GiftTypeIndividual}, {!DonorRecordDetailLookup.record.PersonMailingCity}, {!DonorRecordDetailLookup.record.BillingCity}), {!InitialGiftEntry.City})</expression>
    </formulas>
    <formulas>
        <description>Returns the name of the current commitment matching transaction if no value is selected in MatchingGiftCommitmentDataTable; otherwise returns the name of the item in the first selected row of MatchingGiftCommitmentDataTable.</description>
        <name>CommitmentMatchingTrxFormula</name>
        <dataType>String</dataType>
        <expression>IF(ISBLANK({!MatchingGiftCommitmentDataTable.firstSelectedRow.Id}), IF(OR(ISBLANK({!DonorRecordDetailLookup.record.Id}), {!GetGiftEntryFromGiftEntryId.DonorId} != {!DonorRecordDetailLookup.record.Id}), null, {!GetGiftEntryFromGiftEntryId.GiftTransaction.Name}), {!MatchingGiftCommitmentDataTable.firstSelectedRow.Name})</expression>
    </formulas>
    <formulas>
        <name>CountryDefaultFormula</name>
        <dataType>String</dataType>
        <expression>IF(!ISBLANK({!DonorRecordDetailLookup.record.Id}), IF({!GiftTypePicklist} == {!GiftTypeIndividual}, {!DonorRecordDetailLookup.record.PersonMailingCountry}, {!DonorRecordDetailLookup.record.BillingCountry}), {!InitialGiftEntry.Country})</expression>
    </formulas>
    <formulas>
        <description>Returns the organization name from InitialGiftEntry if DonorRecordDetailLookup.Id is blank else DonorRecordDetailLookup.Name</description>
        <name>DefaultAccountNameFormula</name>
        <dataType>String</dataType>
        <expression>IF(!ISBLANK({!DonorRecordDetailLookup.record.Id}), {!DonorRecordDetailLookup.record.Name}, {!InitialGiftEntry.OrganizationName})</expression>
    </formulas>
    <formulas>
        <description>Returns the first name from InitialGiftEntry if DonorRecordDetailLookup.Id is blank else DonorRecordDetailLookup.FirstName</description>
        <name>DefaultFirstNameFormula</name>
        <dataType>String</dataType>
        <expression>IF(!ISBLANK({!DonorRecordDetailLookup.record.Id}), {!DonorRecordDetailLookup.record.FirstName}, {!InitialGiftEntry.FirstName})</expression>
    </formulas>
    <formulas>
        <description>Returns the last name from InitialGiftEntry if DonorRecordDetailLookup.Id is blank else DonorRecordDetailLookup.LastName</description>
        <name>DefaultLastNameFormula</name>
        <dataType>String</dataType>
        <expression>IF(!ISBLANK({!DonorRecordDetailLookup.record.Id}),{!DonorRecordDetailLookup.record.LastName},{!InitialGiftEntry.LastName})</expression>
    </formulas>
    <formulas>
        <name>DefaultPostalCodeFormula</name>
        <dataType>String</dataType>
        <expression>IF(!ISBLANK({!DonorRecordDetailLookup.record.Id}), IF({!GiftTypePicklist} == {!GiftTypeIndividual}, {!DonorRecordDetailLookup.record.PersonMailingPostalCode}, {!DonorRecordDetailLookup.record.BillingPostalCode}), {!InitialGiftEntry.PostalCode})</expression>
    </formulas>
    <formulas>
        <name>EmailDefaultFormula</name>
        <dataType>String</dataType>
        <expression>IF(!ISBLANK({!DonorRecordDetailLookup.record.Id}), {!DonorRecordDetailLookup.record.PersonEmail}, {!InitialGiftEntry.Email})</expression>
    </formulas>
    <formulas>
        <description>Calculates the estimated amount of all gifts contained in the batch.</description>
        <name>EstimatedBatchAmountFormula</name>
        <dataType>Number</dataType>
        <expression>IF(ISNULL({!GetGiftBatch.ExpectedValueofGiftsinBatch}), 0, {!GetGiftBatch.ExpectedValueofGiftsinBatch})</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <description>Calculates the estimated number of gift entry records contained in the gift batch.</description>
        <name>EstimatedGiftCountFormula</name>
        <dataType>Number</dataType>
        <expression>IF(ISNULL({!GetGiftBatch.EstimatedGiftCount}), 0, {!GetGiftBatch.EstimatedGiftCount})</expression>
        <scale>0</scale>
    </formulas>
    <formulas>
        <name>HomePhoneDefaultFormula</name>
        <dataType>String</dataType>
        <expression>IF(!ISBLANK({!DonorRecordDetailLookup.record.Id}), {!DonorRecordDetailLookup.record.PersonHomePhone}, {!InitialGiftEntry.HomePhone})</expression>
    </formulas>
    <formulas>
        <name>MobilePhoneDefaultFormula</name>
        <dataType>String</dataType>
        <expression>IF(!ISBLANK({!DonorRecordDetailLookup.record.Id}), IF({!GiftTypePicklist} == {!GiftTypeIndividual}, {!DonorRecordDetailLookup.record.PersonMobilePhone}, {!DonorRecordDetailLookup.record.Phone}), {!InitialGiftEntry.MobilePhone})</expression>
    </formulas>
    <formulas>
        <name>Selected_GiftCommitmentId_Default_Template</name>
        <dataType>String</dataType>
        <expression>IF(ISBLANK({!MatchingGiftCommitmentDataTable.firstSelectedRow.GiftCommitmentId}), IF(ISBLANK({!DonorRecordDetailLookup.record.Id}), null,{!GetGiftEntryFromGiftEntryId.GiftCommitmentId}), {!MatchingGiftCommitmentDataTable.firstSelectedRow.GiftCommitmentId})</expression>
    </formulas>
    <formulas>
        <name>Selected_GiftTransactionId_Default_Template</name>
        <dataType>String</dataType>
        <expression>IF(ISBLANK({!MatchingGiftCommitmentDataTable.firstSelectedRow.Id}), IF(ISBLANK({!DonorRecordDetailLookup.record.Id}), null,{!GetGiftEntryFromGiftEntryId.GiftTransactionId}), {!MatchingGiftCommitmentDataTable.firstSelectedRow.Id})</expression>
    </formulas>
    <formulas>
        <name>StateDefaultFormula</name>
        <dataType>String</dataType>
        <expression>IF(!ISBLANK({!DonorRecordDetailLookup.record.Id}), IF({!GiftTypePicklist} == {!GiftTypeIndividual}, {!DonorRecordDetailLookup.record.PersonMailingState}, {!DonorRecordDetailLookup.record.BillingState}), {!InitialGiftEntry.State})</expression>
    </formulas>
    <formulas>
        <name>StreetDefaultFormula</name>
        <dataType>String</dataType>
        <expression>IF(!ISBLANK({!DonorRecordDetailLookup.record.Id}), IF({!GiftTypePicklist} == {!GiftTypeIndividual}, {!DonorRecordDetailLookup.record.PersonMailingStreet}, {!DonorRecordDetailLookup.record.BillingStreet}), {!InitialGiftEntry.Street})</expression>
    </formulas>
    <formulas>
        <description>Calculates the sum of gift amounts for all gifts contained in the gift batch.</description>
        <name>TotalBatchAmountFormula</name>
        <dataType>Number</dataType>
        <expression>IF(ISNULL({!GetGiftBatch.TotalBatchAmount}), 0, {!GetGiftBatch.TotalBatchAmount})</expression>
        <scale>2</scale>
    </formulas>
    <interviewLabel>Manage Gift Entries Findock {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Manage Gift Entries Findock</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>Flow</processType>
    <recordCreates>
        <description>Creates a gift entry record.</description>
        <name>CreateGiftEntry</name>
        <label>Create Gift Entry</label>
        <locationX>1419</locationX>
        <locationY>1730</locationY>
        <connector>
            <targetReference>HaveGiftBatchId</targetReference>
        </connector>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>DisplayErrorScreen</targetReference>
        </faultConnector>
        <inputReference>GiftEntry</inputReference>
    </recordCreates>
    <recordLookups>
        <description>Gets the gift batch record with an ID that matches GiftBatchId and stores the result in the Gift Batch from GetGiftBatch record variable.</description>
        <name>GetGiftBatch</name>
        <label>Get Gift Batch</label>
        <locationX>314</locationX>
        <locationY>842</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>UseWhichTemplate</targetReference>
        </connector>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>DisplayErrorScreen</targetReference>
        </faultConnector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GiftBatchId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>GiftBatch</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Gets the gift entry record with a GiftBatchID matching GiftBatchId and IsSetAsDefault field set to True. Stores the result in the Gift Entry from GetGiftEntryFromGiftBatchId record variable.</description>
        <name>GetGiftEntryFromGiftBatchId</name>
        <label>Get Gift Entry</label>
        <locationX>578</locationX>
        <locationY>542</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>SetInitialGiftEntryForGiftBatchId</targetReference>
        </connector>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>DisplayErrorScreen</targetReference>
        </faultConnector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>IsSetAsDefault</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>GiftBatchId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GiftBatchId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>GiftEntry</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Gets the gift entry record with an ID matching giftEntryId and stores the result in the Gift Entry from GetGiftEntryFromGiftEntryId record variable.</description>
        <name>GetGiftEntryFromGiftEntryId</name>
        <label>Get Gift Entry</label>
        <locationX>50</locationX>
        <locationY>542</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>SetInitialGiftEntryForGiftEntryId</targetReference>
        </connector>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>DisplayErrorScreen</targetReference>
        </faultConnector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GiftEntryId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>GiftEntry</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordRollbacks>
        <description>Undoes all record changes and additions made after CollectGiftEntryDetailsScreen.</description>
        <name>RollBackGiftEntryTrxnUpdates</name>
        <label>Roll Back Gift Entry and Transaction Updates</label>
        <locationX>1617</locationX>
        <locationY>2054</locationY>
        <connector>
            <targetReference>DisplayErrorScreen</targetReference>
        </connector>
    </recordRollbacks>
    <recordUpdates>
        <description>Updates the gift entry record with an ID that matches the gift entry ID of Gift Entry from GetGiftEntryFromGiftBatchId, setting the IsSetAsDefault field to false.</description>
        <name>ResetFormerDefaultGiftEntry</name>
        <label>Reset Former Default Gift Entry</label>
        <locationX>594</locationX>
        <locationY>1382</locationY>
        <connector>
            <targetReference>HaveGiftEntryIdAgain</targetReference>
        </connector>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>DisplayErrorScreen</targetReference>
        </faultConnector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetGiftEntryFromGiftBatchId.Id</elementReference>
            </value>
        </filters>
        <inputAssignments>
            <field>IsSetAsDefault</field>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </inputAssignments>
        <object>GiftEntry</object>
    </recordUpdates>
    <recordUpdates>
        <description>Updates the gift entry record that the user selected in CollectGiftEntryDetailsScreen.</description>
        <name>UpdateGiftEntry</name>
        <label>Update Gift Entry</label>
        <locationX>297</locationX>
        <locationY>1730</locationY>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>DisplayErrorScreen</targetReference>
        </faultConnector>
        <inputReference>GiftEntry</inputReference>
    </recordUpdates>
    <recordUpdates>
        <description>Updates the gift entry record with values output from ProcessGiftEntry.</description>
        <name>UpdateGiftEntryValPostProcessing</name>
        <label>Update Gift Entry Values Post Processing</label>
        <locationX>957</locationX>
        <locationY>2162</locationY>
        <connector>
            <targetReference>Is_Creditcard</targetReference>
        </connector>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>DisplayErrorScreen</targetReference>
        </faultConnector>
        <inputReference>GiftEntry</inputReference>
    </recordUpdates>
    <screens>
        <description>Allows the flow user to preview and override default template values for a gift entry in a batch. This screen is based on the out of the box default screen template that contains all Gift Entry object fields.</description>
        <name>CollectGiftEntryDetailsScreen</name>
        <label>Collect Gift Entry Details</label>
        <locationX>858</locationX>
        <locationY>1058</locationY>
        <allowBack>false</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>SetInitialGiftEntryValuesForGiftEntry</targetReference>
        </connector>
        <fields>
            <name>CollectGiftEntryDetailsScreen_Section1</name>
            <fieldType>RegionContainer</fieldType>
            <fields>
                <name>CollectGiftEntryDetailsScreen_Section1_Column1</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>EstimatedGiftEntryCountLabelDisplayText</name>
                    <fieldText>&lt;p class=&quot;ql-indent-1&quot;&gt;Estimated Gift Entry Count&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                </fields>
                <fields>
                    <name>EstimatedGiftCountDisplayText</name>
                    <fieldText>&lt;p class=&quot;ql-indent-1&quot;&gt;&lt;strong&gt;{!EstimatedGiftCountFormula}&lt;/strong&gt;&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>CollectGiftEntryDetailsScreen_Section1_Column2</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>TotalGiftEntryCountLabelDisplayText</name>
                    <fieldText>&lt;p class=&quot;ql-indent-1&quot;&gt;Total Gift Entry Count&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                </fields>
                <fields>
                    <name>TotalGiftEntryCountDisplayText</name>
                    <fieldText>&lt;p class=&quot;ql-indent-1&quot;&gt;&lt;strong&gt;{!GetGiftBatch.TotalGiftCount}&lt;/strong&gt;&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>CollectGiftEntryDetailsScreen_Section1_Column3</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>EstimatedGiftBatchAmtLabelDisplayText</name>
                    <fieldText>&lt;p class=&quot;ql-indent-1&quot;&gt;Estimated Gift Batch Amount&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                </fields>
                <fields>
                    <name>EstimatedGiftBatchAmountDisplayText</name>
                    <fieldText>&lt;p class=&quot;ql-indent-1&quot;&gt;&lt;strong&gt;{!EstimatedBatchAmountFormula}&lt;/strong&gt;&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>CollectGiftEntryDetailsScreen_Section1_Column4</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>TotalGiftBatchAmountLabelDisplayText</name>
                    <fieldText>&lt;p class=&quot;ql-indent-1&quot;&gt;Total Gift Batch Amount&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                </fields>
                <fields>
                    <name>TotalGiftBatchAmountDisplayText</name>
                    <fieldText>&lt;p class=&quot;ql-indent-1&quot;&gt;&lt;strong&gt;{!TotalBatchAmountFormula}&lt;/strong&gt;&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <isRequired>false</isRequired>
            <regionContainerType>SectionWithoutHeader</regionContainerType>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>GiftEntryId</leftValueReference>
                    <operator>IsNull</operator>
                    <rightValue>
                        <booleanValue>true</booleanValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>GiftBatchId</leftValueReference>
                    <operator>IsNull</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>DonorInformationSection</name>
            <fieldText>Donor Information</fieldText>
            <fieldType>RegionContainer</fieldType>
            <fields>
                <name>DonorInformationSection_Column1</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>GiftTypePicklist</name>
                    <choiceReferences>GiftTypePicklistChoiceSet</choiceReferences>
                    <dataType>String</dataType>
                    <defaultValue>
                        <elementReference>InitialGiftEntry.GiftType</elementReference>
                    </defaultValue>
                    <fieldText>Gift Type</fieldText>
                    <fieldType>DropdownBox</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>DonorInformationSection_Column2</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>DonorRecordDetailLookup</name>
                    <dataTypeMappings>
                        <typeName>T</typeName>
                        <typeValue>Account</typeValue>
                    </dataTypeMappings>
                    <extensionName>runtime_industries_frops:lookup</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>fieldApiName</name>
                        <value>
                            <stringValue>DonorId</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>label</name>
                        <value>
                            <stringValue>Donor</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>objectApiName</name>
                        <value>
                            <stringValue>GiftEntry</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>recordId</name>
                        <value>
                            <elementReference>InitialGiftEntry.DonorId</elementReference>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>DonorInformationSection_Column3</name>
                <fieldType>Region</fieldType>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>DonorInformationSection_Column4</name>
                <fieldType>Region</fieldType>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <isRequired>false</isRequired>
            <regionContainerType>SectionWithHeader</regionContainerType>
        </fields>
        <fields>
            <name>AddEditDonorDetailsSection</name>
            <fieldText>Add or Edit Donor Details</fieldText>
            <fieldType>RegionContainer</fieldType>
            <fields>
                <name>AddEditDonorDetailsSection_Column1</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>SalutationPicklist</name>
                    <choiceReferences>SalutationPicklistChoiceSet</choiceReferences>
                    <dataType>String</dataType>
                    <defaultValue>
                        <elementReference>DonorRecordDetailLookup.record.Salutation</elementReference>
                    </defaultValue>
                    <fieldText>Salutation</fieldText>
                    <fieldType>DropdownBox</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>false</isRequired>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>GiftTypePicklist</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <stringValue>Individual</stringValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>OrganizationNameText</name>
                    <dataType>String</dataType>
                    <defaultValue>
                        <elementReference>DefaultAccountNameFormula</elementReference>
                    </defaultValue>
                    <fieldText>Organization Name</fieldText>
                    <fieldType>InputField</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>false</isRequired>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>GiftTypePicklist</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <stringValue>Organizational</stringValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>EmailAddressEmailComponent</name>
                    <extensionName>flowruntime:email</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>value</name>
                        <value>
                            <elementReference>EmailDefaultFormula</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>label</name>
                        <value>
                            <stringValue>Email Address</stringValue>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>GiftTypePicklist</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <stringValue>Individual</stringValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>CountryText</name>
                    <dataType>String</dataType>
                    <defaultValue>
                        <elementReference>CountryDefaultFormula</elementReference>
                    </defaultValue>
                    <fieldText>Country</fieldText>
                    <fieldType>InputField</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>false</isRequired>
                    <validationRule>
                        <errorMessage>&lt;p&gt;&lt;span style=&quot;color: rgb(234, 0, 30); background-color: rgb(255, 255, 255);&quot;&gt;Enter a country that&apos;s up to 80 characters.&lt;/span&gt;&lt;/p&gt;</errorMessage>
                        <formulaExpression>LEN({!CountryText}) &lt;= 80</formulaExpression>
                    </validationRule>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>AddEditDonorDetailsSection_Column2</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>FirstNameText</name>
                    <dataType>String</dataType>
                    <defaultValue>
                        <elementReference>DefaultFirstNameFormula</elementReference>
                    </defaultValue>
                    <fieldText>First Name</fieldText>
                    <fieldType>InputField</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>false</isRequired>
                    <validationRule>
                        <errorMessage>&lt;p&gt;&lt;span style=&quot;color: rgb(234, 0, 30); background-color: rgb(255, 255, 255);&quot;&gt;Enter a first name that&apos;s up to 80 characters.&lt;/span&gt;&lt;/p&gt;</errorMessage>
                        <formulaExpression>LEN({!FirstNameText}) &lt;= 40</formulaExpression>
                    </validationRule>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>GiftTypePicklist</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <stringValue>Individual</stringValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>StreetText</name>
                    <dataType>String</dataType>
                    <defaultValue>
                        <elementReference>StreetDefaultFormula</elementReference>
                    </defaultValue>
                    <fieldText>Street</fieldText>
                    <fieldType>InputField</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>false</isRequired>
                </fields>
                <fields>
                    <name>StateOrProvinceText</name>
                    <dataType>String</dataType>
                    <defaultValue>
                        <elementReference>StateDefaultFormula</elementReference>
                    </defaultValue>
                    <fieldText>State or Province</fieldText>
                    <fieldType>InputField</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>false</isRequired>
                    <validationRule>
                        <errorMessage>&lt;p&gt;&lt;span style=&quot;color: rgb(234, 0, 30); background-color: rgb(255, 255, 255);&quot;&gt;Enter a state that&apos;s up to 80 characters.&lt;/span&gt;&lt;/p&gt;</errorMessage>
                        <formulaExpression>LEN({!StateOrProvinceText}) &lt;= 80</formulaExpression>
                    </validationRule>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>AddEditDonorDetailsSection_Column3</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>LastNameText</name>
                    <dataType>String</dataType>
                    <defaultValue>
                        <elementReference>DefaultLastNameFormula</elementReference>
                    </defaultValue>
                    <fieldText>Last Name</fieldText>
                    <fieldType>InputField</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>false</isRequired>
                    <validationRule>
                        <errorMessage>&lt;p&gt;&lt;span style=&quot;color: rgb(234, 0, 30); background-color: rgb(255, 255, 255);&quot;&gt;Enter a last name that&apos;s up to 80 characters.&lt;/span&gt;&lt;/p&gt;</errorMessage>
                        <formulaExpression>LEN({!LastNameText}) &lt;= 80</formulaExpression>
                    </validationRule>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>GiftTypePicklist</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <stringValue>Individual</stringValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>CityText</name>
                    <dataType>String</dataType>
                    <defaultValue>
                        <elementReference>CityDefaultFormula</elementReference>
                    </defaultValue>
                    <fieldText>City</fieldText>
                    <fieldType>InputField</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>false</isRequired>
                    <validationRule>
                        <errorMessage>&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(234, 0, 30);&quot;&gt;Enter a city that&apos;s up to 40 characters.&lt;/span&gt;&lt;/p&gt;</errorMessage>
                        <formulaExpression>LEN({!CityText}) &lt;= 40</formulaExpression>
                    </validationRule>
                </fields>
                <fields>
                    <name>PostalCodeText</name>
                    <dataType>String</dataType>
                    <defaultValue>
                        <elementReference>DefaultPostalCodeFormula</elementReference>
                    </defaultValue>
                    <fieldText>Postal Code</fieldText>
                    <fieldType>InputField</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>false</isRequired>
                    <validationRule>
                        <errorMessage>&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(234, 0, 30);&quot;&gt;Enter a postal code that&apos;s up to 20 characters.&lt;/span&gt;&lt;/p&gt;</errorMessage>
                        <formulaExpression>LEN({!PostalCodeText}) &lt;= 20</formulaExpression>
                    </validationRule>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>AddEditDonorDetailsSection_Column4</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>HomePhoneComponent</name>
                    <extensionName>flowruntime:phone</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>label</name>
                        <value>
                            <stringValue>Home Phone</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>value</name>
                        <value>
                            <elementReference>HomePhoneDefaultFormula</elementReference>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>GiftTypePicklist</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <stringValue>Individual</stringValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>MobilePhoneComponent</name>
                    <extensionName>flowruntime:phone</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>label</name>
                        <value>
                            <stringValue>Mobile Phone</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>value</name>
                        <value>
                            <elementReference>MobilePhoneDefaultFormula</elementReference>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <isRequired>false</isRequired>
            <regionContainerType>SectionWithHeader</regionContainerType>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>GiftTypePicklist</leftValueReference>
                    <operator>NotEqualTo</operator>
                    <rightValue>
                        <stringValue></stringValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>SetGiftDateSection</name>
            <fieldText>Set Gift Date</fieldText>
            <fieldType>RegionContainer</fieldType>
            <fields>
                <name>SetGiftDateSection_Column1</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>GiftReceivedDate</name>
                    <dataType>Date</dataType>
                    <defaultValue>
                        <elementReference>InitialGiftEntry.GiftReceivedDate</elementReference>
                    </defaultValue>
                    <fieldText>Gift Received Date</fieldText>
                    <fieldType>InputField</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>SetGiftDateSection_Column2</name>
                <fieldType>Region</fieldType>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>SetGiftDateSection_Column3</name>
                <fieldType>Region</fieldType>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>SetGiftDateSection_Column4</name>
                <fieldType>Region</fieldType>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <isRequired>false</isRequired>
            <regionContainerType>SectionWithHeader</regionContainerType>
        </fields>
        <fields>
            <name>SetGiftCommitmentDetailsSection</name>
            <fieldText>Set Gift Commitment Details</fieldText>
            <fieldType>RegionContainer</fieldType>
            <fields>
                <name>SetGiftCommitmentDetailsSection_Column1</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>SelectedGiftTransactionNameEmailComponent</name>
                    <extensionName>flowruntime:email</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>label</name>
                        <value>
                            <stringValue>$Label.GiftEntryFlow.SelectedGiftTransactionNameEmailComponent</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>readonly</name>
                        <value>
                            <booleanValue>true</booleanValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>disabled</name>
                        <value>
                            <booleanValue>false</booleanValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>value</name>
                        <value>
                            <elementReference>CommitmentMatchingTrxFormula</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>required</name>
                        <value>
                            <booleanValue>false</booleanValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>placeholder</name>
                        <value>
                            <stringValue> </stringValue>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>GiftEntryId</leftValueReference>
                            <operator>IsNull</operator>
                            <rightValue>
                                <booleanValue>false</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>HiddenGiftCommitmentIdText</name>
                    <extensionName>flowruntime:email</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>label</name>
                        <value>
                            <stringValue>Gift Commitment ID</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>readonly</name>
                        <value>
                            <booleanValue>true</booleanValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>value</name>
                        <value>
                            <elementReference>Selected_GiftCommitmentId_Default_Template</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>placeholder</name>
                        <value>
                            <stringValue>Hidden</stringValue>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>IsHide</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>HiddenGiftTransactionIdText</name>
                    <extensionName>flowruntime:email</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>placeholder</name>
                        <value>
                            <stringValue>Hidden</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>label</name>
                        <value>
                            <stringValue>Gift Transaction ID</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>readonly</name>
                        <value>
                            <booleanValue>true</booleanValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>value</name>
                        <value>
                            <elementReference>Selected_GiftTransactionId_Default_Template</elementReference>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>IsHide</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>GetCmtMatchingNpcCallActionComponent</name>
                    <dataTypeMappings>
                        <typeName>T</typeName>
                        <typeValue>GiftTransaction</typeValue>
                    </dataTypeMappings>
                    <extensionName>runtime_industries_frops:npcCallAction</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>action</name>
                        <value>
                            <stringValue>GET_COMMITMENT_MATCHING</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>donorId</name>
                        <value>
                            <elementReference>DonorRecordDetailLookup.record.Id</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>giftReceivedDate</name>
                        <value>
                            <elementReference>GiftReceivedDate</elementReference>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                </fields>
                <fields>
                    <name>MatchingGiftCommitmentDataTable</name>
                    <dataTypeMappings>
                        <typeName>T</typeName>
                        <typeValue>GiftTransaction</typeValue>
                    </dataTypeMappings>
                    <extensionName>flowruntime:datatable</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>label</name>
                        <value>
                            <stringValue>Matching Gift Commitments</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>selectionMode</name>
                        <value>
                            <stringValue>SINGLE_SELECT</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>minRowSelection</name>
                        <value>
                            <numberValue>0.0</numberValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>columns</name>
                        <value>
                            <stringValue>[{&quot;apiName&quot;:&quot;Name&quot;,&quot;guid&quot;:&quot;column-68c7&quot;,&quot;editable&quot;:false,&quot;hasCustomHeaderLabel&quot;:false,&quot;customHeaderLabel&quot;:&quot;Commitment Name&quot;,&quot;wrapText&quot;:true,&quot;order&quot;:0,&quot;label&quot;:&quot;Name&quot;,&quot;type&quot;:&quot;text&quot;},{&quot;apiName&quot;:&quot;TransactionDueDate&quot;,&quot;guid&quot;:&quot;column-6b90&quot;,&quot;editable&quot;:false,&quot;hasCustomHeaderLabel&quot;:false,&quot;customHeaderLabel&quot;:&quot;Transaction Due Date&quot;,&quot;wrapText&quot;:true,&quot;order&quot;:1,&quot;label&quot;:&quot;Transaction Due Date&quot;,&quot;type&quot;:&quot;date&quot;},{&quot;apiName&quot;:&quot;OriginalAmount&quot;,&quot;guid&quot;:&quot;column-07d4&quot;,&quot;editable&quot;:false,&quot;hasCustomHeaderLabel&quot;:false,&quot;customHeaderLabel&quot;:&quot;Original Amount&quot;,&quot;wrapText&quot;:true,&quot;order&quot;:2,&quot;label&quot;:&quot;Original Amount&quot;,&quot;type&quot;:&quot;currency&quot;},{&quot;apiName&quot;:&quot;Status&quot;,&quot;guid&quot;:&quot;column-a170&quot;,&quot;editable&quot;:false,&quot;hasCustomHeaderLabel&quot;:false,&quot;customHeaderLabel&quot;:&quot;Status&quot;,&quot;wrapText&quot;:true,&quot;order&quot;:3,&quot;label&quot;:&quot;Status&quot;,&quot;type&quot;:&quot;text&quot;}]</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>tableData</name>
                        <value>
                            <elementReference>GetCmtMatchingNpcCallActionComponent.giftCommitmentTransactionRecords</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>isShowSearchBar</name>
                        <value>
                            <booleanValue>true</booleanValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>maxRowSelection</name>
                        <value>
                            <numberValue>1.0</numberValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>shouldDisplayLabel</name>
                        <value>
                            <booleanValue>true</booleanValue>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>DonorRecordDetailLookup.record.Id</leftValueReference>
                            <operator>IsNull</operator>
                            <rightValue>
                                <booleanValue>false</booleanValue>
                            </rightValue>
                        </conditions>
                        <conditions>
                            <leftValueReference>GiftReceivedDate</leftValueReference>
                            <operator>IsNull</operator>
                            <rightValue>
                                <booleanValue>false</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>GiftCommitmentInfoDisplayText</name>
                    <fieldText>&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot; class=&quot;ql-indent-1&quot;&gt;&lt;em&gt;Commitment transaction related details are only shown after you select a donor and specify the gift received date.&lt;/em&gt;&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                    <visibilityRule>
                        <conditionLogic>or</conditionLogic>
                        <conditions>
                            <leftValueReference>DonorRecordDetailLookup.record.Id</leftValueReference>
                            <operator>IsNull</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                        <conditions>
                            <leftValueReference>GiftReceivedDate</leftValueReference>
                            <operator>IsNull</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>12</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <isRequired>false</isRequired>
            <regionContainerType>SectionWithHeader</regionContainerType>
        </fields>
        <fields>
            <name>SetGiftInformationSection</name>
            <fieldText>Set Gift Information</fieldText>
            <fieldType>RegionContainer</fieldType>
            <fields>
                <name>SetGiftInformationSection_Column1</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>OutreachSourceCodeRecordDetailLookup</name>
                    <dataTypeMappings>
                        <typeName>T</typeName>
                        <typeValue>OutreachSourceCode</typeValue>
                    </dataTypeMappings>
                    <extensionName>runtime_industries_frops:lookup</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>fieldApiName</name>
                        <value>
                            <stringValue>OutreachSourceCodeId</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>label</name>
                        <value>
                            <stringValue>Outreach Source Code</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>objectApiName</name>
                        <value>
                            <stringValue>GiftEntry</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>recordId</name>
                        <value>
                            <elementReference>InitialGiftEntry.OutreachSourceCodeId</elementReference>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                </fields>
                <fields>
                    <name>PaymentIdentifierText</name>
                    <dataType>String</dataType>
                    <defaultValue>
                        <elementReference>InitialGiftEntry.PaymentIdentifier</elementReference>
                    </defaultValue>
                    <fieldText>Payment Identifier</fieldText>
                    <fieldType>InputField</fieldType>
                    <helpText>&lt;p&gt;Enter a payment identifier based on the selected payment method. For example, for a check payment method, enter a check number.&lt;/p&gt;</helpText>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>false</isRequired>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>SetGiftInformationSection_Column2</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>CampaignLookup</name>
                    <extensionName>flowruntime:lookup</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>fieldApiName</name>
                        <value>
                            <stringValue>CampaignId</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>label</name>
                        <value>
                            <stringValue>Campaign</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>objectApiName</name>
                        <value>
                            <stringValue>GiftEntry</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>recordId</name>
                        <value>
                            <elementReference>CampaignFormula</elementReference>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                </fields>
                <fields>
                    <name>CheckDate</name>
                    <dataType>Date</dataType>
                    <defaultValue>
                        <elementReference>InitialGiftEntry.CheckDate</elementReference>
                    </defaultValue>
                    <fieldText>Check Date</fieldText>
                    <fieldType>InputField</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>false</isRequired>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>PaymentMethodPicklist</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <stringValue>Check</stringValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>SetGiftInformationSection_Column3</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>PaymentMethodPicklist</name>
                    <choiceReferences>PaymentMethodPicklistChoiceSet</choiceReferences>
                    <dataType>String</dataType>
                    <defaultValue>
                        <elementReference>InitialGiftEntry.PaymentMethod</elementReference>
                    </defaultValue>
                    <fieldText>Payment Method</fieldText>
                    <fieldType>DropdownBox</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>SetGiftInformationSection_Column4</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>GiftAmountNumber</name>
                    <dataType>Number</dataType>
                    <defaultValue>
                        <elementReference>InitialGiftEntry.GiftAmount</elementReference>
                    </defaultValue>
                    <fieldText>Gift Amount</fieldText>
                    <fieldType>InputField</fieldType>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <scale>2</scale>
                    <validationRule>
                        <errorMessage>&lt;p&gt;&lt;span style=&quot;color: rgb(234, 0, 30);&quot;&gt;Enter a gift amount that&apos;s greater than 0.&lt;/span&gt;&lt;/p&gt;</errorMessage>
                        <formulaExpression>{!GiftAmountNumber} &gt; 0</formulaExpression>
                    </validationRule>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <isRequired>false</isRequired>
            <regionContainerType>SectionWithHeader</regionContainerType>
        </fields>
        <fields>
            <name>SetGiftDesignationInformationSection</name>
            <fieldText>Set Designation Information</fieldText>
            <fieldType>RegionContainer</fieldType>
            <fields>
                <name>SetGiftDesignationInformationSection_Column1</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>GetGiftEntryDesignationsNpcCallActionComponent</name>
                    <dataTypeMappings>
                        <typeName>T</typeName>
                        <typeValue>GiftTransactionDesignation</typeValue>
                    </dataTypeMappings>
                    <extensionName>runtime_industries_frops:npcCallAction</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>action</name>
                        <value>
                            <stringValue>GET_GIFT_ENTRY_DESIGNATIONS</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>campaignId</name>
                        <value>
                            <elementReference>CampaignLookup.recordId</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>transactionId</name>
                        <value>
                            <elementReference>MatchingGiftCommitmentDataTable.firstSelectedRow.Id</elementReference>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                </fields>
                <fields>
                    <name>GetDesignationsDesignationInformationComponent</name>
                    <dataTypeMappings>
                        <typeName>T</typeName>
                        <typeValue>GiftTransactionDesignation</typeValue>
                    </dataTypeMappings>
                    <extensionName>runtime_industries_frops:designation</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>noOfDesignations</name>
                        <value>
                            <stringValue>3</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>totalAmount</name>
                        <value>
                            <elementReference>GiftAmountNumber</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>giftDesignationAmount1</name>
                        <value>
                            <elementReference>InitialGiftEntry.GiftDesignation1Amount</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>giftDesignationAmount2</name>
                        <value>
                            <elementReference>InitialGiftEntry.GiftDesignation2Amount</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>giftDesignationAmount3</name>
                        <value>
                            <elementReference>InitialGiftEntry.GiftDesignation3Amount</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>giftDesignationId1</name>
                        <value>
                            <elementReference>InitialGiftEntry.GiftDesignation1.Id</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>giftDesignationId2</name>
                        <value>
                            <elementReference>InitialGiftEntry.GiftDesignation2Id</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>giftDesignationId3</name>
                        <value>
                            <elementReference>InitialGiftEntry.GiftDesignation3Id</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>giftDesignationPercent1</name>
                        <value>
                            <elementReference>InitialGiftEntry.GiftDesignation1Percent</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>giftDesignationPercent2</name>
                        <value>
                            <elementReference>InitialGiftEntry.GiftDesignation2Percent</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>giftDesignationPercent3</name>
                        <value>
                            <elementReference>InitialGiftEntry.GiftDesignation3Percent</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>source</name>
                        <value>
                            <stringValue>GIFT_ENTRY_DESIGNATION</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>designations</name>
                        <value>
                            <elementReference>GetGiftEntryDesignationsNpcCallActionComponent.giftDesignations</elementReference>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                    <visibilityRule>
                        <conditionLogic>((1 OR 2) AND 3) OR 3</conditionLogic>
                        <conditions>
                            <leftValueReference>CampaignLookup.recordId</leftValueReference>
                            <operator>IsNull</operator>
                            <rightValue>
                                <booleanValue>false</booleanValue>
                            </rightValue>
                        </conditions>
                        <conditions>
                            <leftValueReference>MatchingGiftCommitmentDataTable.firstSelectedRow.Id</leftValueReference>
                            <operator>IsNull</operator>
                            <rightValue>
                                <booleanValue>false</booleanValue>
                            </rightValue>
                        </conditions>
                        <conditions>
                            <leftValueReference>GiftAmountNumber</leftValueReference>
                            <operator>IsNull</operator>
                            <rightValue>
                                <booleanValue>false</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>GiftDesignationInfoDisplayText</name>
                    <fieldText>&lt;p style=&quot;text-align: center;&quot; class=&quot;ql-indent-1&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot; class=&quot;ql-indent-1&quot;&gt;&lt;em&gt;Default designation details can be added only after you specify a gift amount, or select a campaign or commitment and specify the gift amount.&lt;/em&gt;&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>GiftAmountNumber</leftValueReference>
                            <operator>IsNull</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>12</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <isRequired>false</isRequired>
            <regionContainerType>SectionWithHeader</regionContainerType>
        </fields>
        <fields>
            <name>SetSoftCreditInformationSection</name>
            <fieldText>Set Soft Credit Information</fieldText>
            <fieldType>RegionContainer</fieldType>
            <fields>
                <name>SetSoftCreditInformationSection_Column1</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>SoftCreditComponent</name>
                    <extensionName>runtime_industries_frops:softCredit</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>giftAmount</name>
                        <value>
                            <elementReference>GiftAmountNumber</elementReference>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>softCredits</name>
                        <value>
                            <elementReference>InitialGiftEntry.SoftCreditInformation</elementReference>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>GiftAmountNumber</leftValueReference>
                            <operator>IsNull</operator>
                            <rightValue>
                                <booleanValue>false</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>SoftCreditInfoDisplayText</name>
                    <fieldText>&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;em&gt;You can add soft credit details only after you specify a gift amount.&lt;/em&gt;&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>GiftAmountNumber</leftValueReference>
                            <operator>IsNull</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>12</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <isRequired>false</isRequired>
            <regionContainerType>SectionWithHeader</regionContainerType>
        </fields>
        <fields>
            <name>SetGiftEntryAsDefaultCheckbox</name>
            <dataType>Boolean</dataType>
            <defaultValue>
                <elementReference>InitialGiftEntry.IsSetAsDefault</elementReference>
            </defaultValue>
            <fieldText>Set As Default</fieldText>
            <fieldType>InputField</fieldType>
            <helpText>&lt;p&gt;Select this option if you want these gift entry values to be used as default values for other gift entries in this batch. Fields shown on this page are determined by the selected template.&lt;/p&gt;</helpText>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
        </fields>
        <nextOrFinishButtonLabel>Save</nextOrFinishButtonLabel>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <description>Displays an error message to the flow user when any of the actions fail.</description>
        <name>DisplayErrorScreen</name>
        <label>Display Error</label>
        <locationX>1617</locationX>
        <locationY>2162</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <fields>
            <name>DisplayTextErrorMessage</name>
            <fieldText>&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;color: rgb(234, 0, 30);&quot;&gt;{!$Flow.FaultMessage}&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <nextOrFinishButtonLabel>Close</nextOrFinishButtonLabel>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>Take_Payment</name>
        <label>Take Payment</label>
        <locationX>825</locationX>
        <locationY>2378</locationY>
        <allowBack>false</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>false</allowPause>
        <fields>
            <name>Take_Payment_Section1</name>
            <fieldType>RegionContainer</fieldType>
            <fields>
                <name>Take_Payment_Section1_Column1</name>
                <fieldType>Region</fieldType>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>Take_Payment_Section1_Column2</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>TakeFidockPayment</name>
                    <extensionName>cpm:findockPayment</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>recordId</name>
                        <value>
                            <stringValue>{!ProcessGiftEntry.giftTransactionId}</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>target</name>
                        <value>
                            <stringValue>default</stringValue>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>6</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>Take_Payment_Section1_Column3</name>
                <fieldType>Region</fieldType>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>3</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <isRequired>false</isRequired>
            <regionContainerType>SectionWithoutHeader</regionContainerType>
        </fields>
        <nextOrFinishButtonLabel>Save</nextOrFinishButtonLabel>
        <showFooter>true</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <sourceTemplate>frops_flow__ManageGiftEntries</sourceTemplate>
    <start>
        <locationX>188</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>WhatTypeOfId</targetReference>
        </connector>
    </start>
    <status>Active</status>
    <variables>
        <description>Stores the ID of a gift batch record to process in the flow.</description>
        <name>GiftBatchId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>Stores the gift entry record to process.</description>
        <name>GiftEntry</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>GiftEntry</objectType>
    </variables>
    <variables>
        <description>Stores the ID of the gift entry record to edit in the flow.</description>
        <name>GiftEntryId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>Stores the gift entry record associated with the batchRecordId or giftEntryId passed into the flow and is used to determine default values for the gift entry record that&apos;s being created or updated.</description>
        <name>InitialGiftEntry</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>GiftEntry</objectType>
    </variables>
    <variables>
        <description>Stores the ID of a gift batch or gift entry record and is passed into the flow.</description>
        <name>recordId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
</Flow>
